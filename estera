#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/gpio.h"

#define LED_PIN         13
#define GREEN_BUTTON    12
#define RED_BUTTON      14

void app_main(void) {
    // Configuração do LED
    gpio_reset_pin(LED_PIN);
    gpio_set_direction(LED_PIN, GPIO_MODE_OUTPUT);
    gpio_set_level(LED_PIN, 1); // LED começa ligado

    // Configuração dos botões com pull-down interno
    gpio_reset_pin(GREEN_BUTTON);
    gpio_set_direction(GREEN_BUTTON, GPIO_MODE_INPUT);
    gpio_pulldown_en(GREEN_BUTTON);

    gpio_reset_pin(RED_BUTTON);
    gpio_set_direction(RED_BUTTON, GPIO_MODE_INPUT);
    gpio_pulldown_en(RED_BUTTON);

    int contador = 0;
    int led_ativo = 1; // LED começa ligado

    int prev_green = 0;
    int prev_red = 0;

    while (1) {
        int green_state = gpio_get_level(GREEN_BUTTON);
        int red_state = gpio_get_level(RED_BUTTON);

        // Botão verde pressionado e LED ativo
        if (green_state == 1 && prev_green == 0 && led_ativo && contador < 6) {
            contador++;
            printf("Contagem de peças: %d\n", contador);
        }

        // Quando a contagem atingir 6, desliga o LED
        if (contador == 6) {
            gpio_set_level(LED_PIN, 0); // Desliga o LED
            led_ativo = 0;
            printf("Número máximo de peças atingido.\n");
        }

        // Botão vermelho pressionado (reativa o LED e reinicia a contagem)
        if (red_state == 1 && prev_red == 0) {
            contador = 0;
            led_ativo = 1;
            gpio_set_level(LED_PIN, 1); // Liga o LED
        }

        prev_green = green_state;
        prev_red = red_state;

        vTaskDelay(pdMS_TO_TICKS(50)); // debounce
    }
}
